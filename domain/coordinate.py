from enum import Enum

from domain.direction import Direction


class Components:
    def __init__(self, column, row):
        self.column = column
        self.row = row

    @property
    def valid(self):
        return Components._is_component_valid(self.column) and Components._is_component_valid(self.row)

    @staticmethod
    def _is_component_valid(component):
        return 0 <= component < 19


def _calculate_index(column: int, row: int) -> int:
    return row * 19 + column


class Coordinate(Enum):
    A1 = ('A1', 0, 18)
    A2 = ('A2', 0, 17)
    A3 = ('A3', 0, 16)
    A4 = ('A4', 0, 15)
    A5 = ('A5', 0, 14)
    A6 = ('A6', 0, 13)
    A7 = ('A7', 0, 12)
    A8 = ('A8', 0, 11)
    A9 = ('A9', 0, 10)
    A10 = ('A10', 0, 9)
    A11 = ('A11', 0, 8)
    A12 = ('A12', 0, 7)
    A13 = ('A13', 0, 6)
    A14 = ('A14', 0, 5)
    A15 = ('A15', 0, 4)
    A16 = ('A16', 0, 3)
    A17 = ('A17', 0, 2)
    A18 = ('A18', 0, 1)
    A19 = ('A19', 0, 0)
    B1 = ('B1', 1, 18)
    B2 = ('B2', 1, 17)
    B3 = ('B3', 1, 16)
    B4 = ('B4', 1, 15)
    B5 = ('B5', 1, 14)
    B6 = ('B6', 1, 13)
    B7 = ('B7', 1, 12)
    B8 = ('B8', 1, 11)
    B9 = ('B9', 1, 10)
    B10 = ('B10', 1, 9)
    B11 = ('B11', 1, 8)
    B12 = ('B12', 1, 7)
    B13 = ('B13', 1, 6)
    B14 = ('B14', 1, 5)
    B15 = ('B15', 1, 4)
    B16 = ('B16', 1, 3)
    B17 = ('B17', 1, 2)
    B18 = ('B18', 1, 1)
    B19 = ('B19', 1, 0)
    C1 = ('C1', 2, 18)
    C2 = ('C2', 2, 17)
    C3 = ('C3', 2, 16)
    C4 = ('C4', 2, 15)
    C5 = ('C5', 2, 14)
    C6 = ('C6', 2, 13)
    C7 = ('C7', 2, 12)
    C8 = ('C8', 2, 11)
    C9 = ('C9', 2, 10)
    C10 = ('C10', 2, 9)
    C11 = ('C11', 2, 8)
    C12 = ('C12', 2, 7)
    C13 = ('C13', 2, 6)
    C14 = ('C14', 2, 5)
    C15 = ('C15', 2, 4)
    C16 = ('C16', 2, 3)
    C17 = ('C17', 2, 2)
    C18 = ('C18', 2, 1)
    C19 = ('C19', 2, 0)
    D1 = ('D1', 3, 18)
    D2 = ('D2', 3, 17)
    D3 = ('D3', 3, 16)
    D4 = ('D4', 3, 15)
    D5 = ('D5', 3, 14)
    D6 = ('D6', 3, 13)
    D7 = ('D7', 3, 12)
    D8 = ('D8', 3, 11)
    D9 = ('D9', 3, 10)
    D10 = ('D10', 3, 9)
    D11 = ('D11', 3, 8)
    D12 = ('D12', 3, 7)
    D13 = ('D13', 3, 6)
    D14 = ('D14', 3, 5)
    D15 = ('D15', 3, 4)
    D16 = ('D16', 3, 3)
    D17 = ('D17', 3, 2)
    D18 = ('D18', 3, 1)
    D19 = ('D19', 3, 0)
    E1 = ('E1', 4, 18)
    E2 = ('E2', 4, 17)
    E3 = ('E3', 4, 16)
    E4 = ('E4', 4, 15)
    E5 = ('E5', 4, 14)
    E6 = ('E6', 4, 13)
    E7 = ('E7', 4, 12)
    E8 = ('E8', 4, 11)
    E9 = ('E9', 4, 10)
    E10 = ('E10', 4, 9)
    E11 = ('E11', 4, 8)
    E12 = ('E12', 4, 7)
    E13 = ('E13', 4, 6)
    E14 = ('E14', 4, 5)
    E15 = ('E15', 4, 4)
    E16 = ('E16', 4, 3)
    E17 = ('E17', 4, 2)
    E18 = ('E18', 4, 1)
    E19 = ('E19', 4, 0)
    F1 = ('F1', 5, 18)
    F2 = ('F2', 5, 17)
    F3 = ('F3', 5, 16)
    F4 = ('F4', 5, 15)
    F5 = ('F5', 5, 14)
    F6 = ('F6', 5, 13)
    F7 = ('F7', 5, 12)
    F8 = ('F8', 5, 11)
    F9 = ('F9', 5, 10)
    F10 = ('F10', 5, 9)
    F11 = ('F11', 5, 8)
    F12 = ('F12', 5, 7)
    F13 = ('F13', 5, 6)
    F14 = ('F14', 5, 5)
    F15 = ('F15', 5, 4)
    F16 = ('F16', 5, 3)
    F17 = ('F17', 5, 2)
    F18 = ('F18', 5, 1)
    F19 = ('F19', 5, 0)
    G1 = ('G1', 6, 18)
    G2 = ('G2', 6, 17)
    G3 = ('G3', 6, 16)
    G4 = ('G4', 6, 15)
    G5 = ('G5', 6, 14)
    G6 = ('G6', 6, 13)
    G7 = ('G7', 6, 12)
    G8 = ('G8', 6, 11)
    G9 = ('G9', 6, 10)
    G10 = ('G10', 6, 9)
    G11 = ('G11', 6, 8)
    G12 = ('G12', 6, 7)
    G13 = ('G13', 6, 6)
    G14 = ('G14', 6, 5)
    G15 = ('G15', 6, 4)
    G16 = ('G16', 6, 3)
    G17 = ('G17', 6, 2)
    G18 = ('G18', 6, 1)
    G19 = ('G19', 6, 0)
    H1 = ('H1', 7, 18)
    H2 = ('H2', 7, 17)
    H3 = ('H3', 7, 16)
    H4 = ('H4', 7, 15)
    H5 = ('H5', 7, 14)
    H6 = ('H6', 7, 13)
    H7 = ('H7', 7, 12)
    H8 = ('H8', 7, 11)
    H9 = ('H9', 7, 10)
    H10 = ('H10', 7, 9)
    H11 = ('H11', 7, 8)
    H12 = ('H12', 7, 7)
    H13 = ('H13', 7, 6)
    H14 = ('H14', 7, 5)
    H15 = ('H15', 7, 4)
    H16 = ('H16', 7, 3)
    H17 = ('H17', 7, 2)
    H18 = ('H18', 7, 1)
    H19 = ('H19', 7, 0)
    J1 = ('J1', 8, 18)
    J2 = ('J2', 8, 17)
    J3 = ('J3', 8, 16)
    J4 = ('J4', 8, 15)
    J5 = ('J5', 8, 14)
    J6 = ('J6', 8, 13)
    J7 = ('J7', 8, 12)
    J8 = ('J8', 8, 11)
    J9 = ('J9', 8, 10)
    J10 = ('J10', 8, 9)
    J11 = ('J11', 8, 8)
    J12 = ('J12', 8, 7)
    J13 = ('J13', 8, 6)
    J14 = ('J14', 8, 5)
    J15 = ('J15', 8, 4)
    J16 = ('J16', 8, 3)
    J17 = ('J17', 8, 2)
    J18 = ('J18', 8, 1)
    J19 = ('J19', 8, 0)
    K1 = ('K1', 9, 18)
    K2 = ('K2', 9, 17)
    K3 = ('K3', 9, 16)
    K4 = ('K4', 9, 15)
    K5 = ('K5', 9, 14)
    K6 = ('K6', 9, 13)
    K7 = ('K7', 9, 12)
    K8 = ('K8', 9, 11)
    K9 = ('K9', 9, 10)
    K10 = ('K10', 9, 9)
    K11 = ('K11', 9, 8)
    K12 = ('K12', 9, 7)
    K13 = ('K13', 9, 6)
    K14 = ('K14', 9, 5)
    K15 = ('K15', 9, 4)
    K16 = ('K16', 9, 3)
    K17 = ('K17', 9, 2)
    K18 = ('K18', 9, 1)
    K19 = ('K19', 9, 0)
    L1 = ('L1', 10, 18)
    L2 = ('L2', 10, 17)
    L3 = ('L3', 10, 16)
    L4 = ('L4', 10, 15)
    L5 = ('L5', 10, 14)
    L6 = ('L6', 10, 13)
    L7 = ('L7', 10, 12)
    L8 = ('L8', 10, 11)
    L9 = ('L9', 10, 10)
    L10 = ('L10', 10, 9)
    L11 = ('L11', 10, 8)
    L12 = ('L12', 10, 7)
    L13 = ('L13', 10, 6)
    L14 = ('L14', 10, 5)
    L15 = ('L15', 10, 4)
    L16 = ('L16', 10, 3)
    L17 = ('L17', 10, 2)
    L18 = ('L18', 10, 1)
    L19 = ('L19', 10, 0)
    M1 = ('M1', 11, 18)
    M2 = ('M2', 11, 17)
    M3 = ('M3', 11, 16)
    M4 = ('M4', 11, 15)
    M5 = ('M5', 11, 14)
    M6 = ('M6', 11, 13)
    M7 = ('M7', 11, 12)
    M8 = ('M8', 11, 11)
    M9 = ('M9', 11, 10)
    M10 = ('M10', 11, 9)
    M11 = ('M11', 11, 8)
    M12 = ('M12', 11, 7)
    M13 = ('M13', 11, 6)
    M14 = ('M14', 11, 5)
    M15 = ('M15', 11, 4)
    M16 = ('M16', 11, 3)
    M17 = ('M17', 11, 2)
    M18 = ('M18', 11, 1)
    M19 = ('M19', 11, 0)
    N1 = ('N1', 12, 18)
    N2 = ('N2', 12, 17)
    N3 = ('N3', 12, 16)
    N4 = ('N4', 12, 15)
    N5 = ('N5', 12, 14)
    N6 = ('N6', 12, 13)
    N7 = ('N7', 12, 12)
    N8 = ('N8', 12, 11)
    N9 = ('N9', 12, 10)
    N10 = ('N10', 12, 9)
    N11 = ('N11', 12, 8)
    N12 = ('N12', 12, 7)
    N13 = ('N13', 12, 6)
    N14 = ('N14', 12, 5)
    N15 = ('N15', 12, 4)
    N16 = ('N16', 12, 3)
    N17 = ('N17', 12, 2)
    N18 = ('N18', 12, 1)
    N19 = ('N19', 12, 0)
    O1 = ('O1', 13, 18)
    O2 = ('O2', 13, 17)
    O3 = ('O3', 13, 16)
    O4 = ('O4', 13, 15)
    O5 = ('O5', 13, 14)
    O6 = ('O6', 13, 13)
    O7 = ('O7', 13, 12)
    O8 = ('O8', 13, 11)
    O9 = ('O9', 13, 10)
    O10 = ('O10', 13, 9)
    O11 = ('O11', 13, 8)
    O12 = ('O12', 13, 7)
    O13 = ('O13', 13, 6)
    O14 = ('O14', 13, 5)
    O15 = ('O15', 13, 4)
    O16 = ('O16', 13, 3)
    O17 = ('O17', 13, 2)
    O18 = ('O18', 13, 1)
    O19 = ('O19', 13, 0)
    P1 = ('P1', 14, 18)
    P2 = ('P2', 14, 17)
    P3 = ('P3', 14, 16)
    P4 = ('P4', 14, 15)
    P5 = ('P5', 14, 14)
    P6 = ('P6', 14, 13)
    P7 = ('P7', 14, 12)
    P8 = ('P8', 14, 11)
    P9 = ('P9', 14, 10)
    P10 = ('P10', 14, 9)
    P11 = ('P11', 14, 8)
    P12 = ('P12', 14, 7)
    P13 = ('P13', 14, 6)
    P14 = ('P14', 14, 5)
    P15 = ('P15', 14, 4)
    P16 = ('P16', 14, 3)
    P17 = ('P17', 14, 2)
    P18 = ('P18', 14, 1)
    P19 = ('P19', 14, 0)
    Q1 = ('Q1', 15, 18)
    Q2 = ('Q2', 15, 17)
    Q3 = ('Q3', 15, 16)
    Q4 = ('Q4', 15, 15)
    Q5 = ('Q5', 15, 14)
    Q6 = ('Q6', 15, 13)
    Q7 = ('Q7', 15, 12)
    Q8 = ('Q8', 15, 11)
    Q9 = ('Q9', 15, 10)
    Q10 = ('Q10', 15, 9)
    Q11 = ('Q11', 15, 8)
    Q12 = ('Q12', 15, 7)
    Q13 = ('Q13', 15, 6)
    Q14 = ('Q14', 15, 5)
    Q15 = ('Q15', 15, 4)
    Q16 = ('Q16', 15, 3)
    Q17 = ('Q17', 15, 2)
    Q18 = ('Q18', 15, 1)
    Q19 = ('Q19', 15, 0)
    R1 = ('R1', 16, 18)
    R2 = ('R2', 16, 17)
    R3 = ('R3', 16, 16)
    R4 = ('R4', 16, 15)
    R5 = ('R5', 16, 14)
    R6 = ('R6', 16, 13)
    R7 = ('R7', 16, 12)
    R8 = ('R8', 16, 11)
    R9 = ('R9', 16, 10)
    R10 = ('R10', 16, 9)
    R11 = ('R11', 16, 8)
    R12 = ('R12', 16, 7)
    R13 = ('R13', 16, 6)
    R14 = ('R14', 16, 5)
    R15 = ('R15', 16, 4)
    R16 = ('R16', 16, 3)
    R17 = ('R17', 16, 2)
    R18 = ('R18', 16, 1)
    R19 = ('R19', 16, 0)
    S1 = ('S1', 17, 18)
    S2 = ('S2', 17, 17)
    S3 = ('S3', 17, 16)
    S4 = ('S4', 17, 15)
    S5 = ('S5', 17, 14)
    S6 = ('S6', 17, 13)
    S7 = ('S7', 17, 12)
    S8 = ('S8', 17, 11)
    S9 = ('S9', 17, 10)
    S10 = ('S10', 17, 9)
    S11 = ('S11', 17, 8)
    S12 = ('S12', 17, 7)
    S13 = ('S13', 17, 6)
    S14 = ('S14', 17, 5)
    S15 = ('S15', 17, 4)
    S16 = ('S16', 17, 3)
    S17 = ('S17', 17, 2)
    S18 = ('S18', 17, 1)
    S19 = ('S19', 17, 0)
    T1 = ('T1', 18, 18)
    T2 = ('T2', 18, 17)
    T3 = ('T3', 18, 16)
    T4 = ('T4', 18, 15)
    T5 = ('T5', 18, 14)
    T6 = ('T6', 18, 13)
    T7 = ('T7', 18, 12)
    T8 = ('T8', 18, 11)
    T9 = ('T9', 18, 10)
    T10 = ('T10', 18, 9)
    T11 = ('T11', 18, 8)
    T12 = ('T12', 18, 7)
    T13 = ('T13', 18, 6)
    T14 = ('T14', 18, 5)
    T15 = ('T15', 18, 4)
    T16 = ('T16', 18, 3)
    T17 = ('T17', 18, 2)
    T18 = ('T18', 18, 1)
    T19 = ('T19', 18, 0)

    def __init__(self, name, column, row):
        self._name = name
        self._column = column
        self._row = row
        self._index = _calculate_index(column, row)

    @staticmethod
    def _calculate_index(column, row):
        return row * 19 + column

    @property
    def name(self):
        return self._name

    @property
    def column(self):
        return self._column

    @property
    def row(self):
        return self._row

    @property
    def index(self):
        return self._index

    @staticmethod
    def get(column, row):
        if not hasattr(Coordinate, '_cache'):
            Coordinate._cache = [None for i in range(361)]
            for coordinate in Coordinate:
                Coordinate._cache[coordinate.index] = coordinate

        Coordinate._check_component(column, 'column')
        Coordinate._check_component(row, 'row')
        index = _calculate_index(column, row)
        return Coordinate._cache[index]

    @staticmethod
    def _check_component(component, name):
        if not (0 <= component < 19):
            raise Exception(f'Received a value of {component} for {name}.')

    def has_neighbor_to(self, direction: Direction):
        components = self._get_components_for(direction)
        return components.valid

    def _get_components_for(self, direction):
        c = self._column
        r = self._row

        if direction == Direction.EAST:
            c += 1
        elif direction == Direction.WEST:
            c -= 1
        elif direction == Direction.NORTH:
            r -= 1
        else:
            r += 1

        return Components(c, r)

    def get_neighbor_to(self, direction: Direction):
        components = self._get_components_for(direction)
        if not components.valid:
            raise Exception(f'{self.name} does not have a neighbor to the {direction.name}.')
        return Coordinate.get(components.column, components.row)

    def neighbors(self):
        for direction in Direction:
            try:
                yield self.get_neighbor_to(direction)
            except Exception:
                pass
