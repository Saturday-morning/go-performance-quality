from __future__ import annotations

import math

from domain.color import Color
from domain.coordinate import Coordinate
from domain.orientation import Orientation
from typing import Optional


class Board:
    _bits_per_intersection = 2
    _intersections_per_number = 63
    _numbers_per_board = int(math.ceil(361. / _intersections_per_number))
    _offset = 0x4000_0000_0000_0000
    _zobrist = [
        0x511143EDC1742DA0, 0x3BB0A70CBF959E77, 0x508BA1D70DB56B1E,
        0xA053BD5DA2A2968F, 0x8E55426FB7717731, 0x74669E7AA8830B34,
        0x444D2D1763542F1, 0xEF3868DEDF9425E3, 0xD3AAF92AD8EB365F,
        0x418A9AF86CEB0366, 0xF1B8F4275EDFDBCB, 0x5A754F1B889034FE,
        0x502ACFE6E26D1698, 0xF03B16367DCF793C, 0x72DFF182393396C8,
        0x92CF7695D31D2521, 0x398E113E04C60217, 0xA51DE323E2840A35,
        0x2E9A672161CE0D9, 0xF48C5518F3CD8913, 0xFC9C7DCFCD98EFF5,
        0xBD356692B7203169, 0x98BA7D5B376B92DF, 0x8AC5731D130FDB39,
        0x85244758953B9F57, 0xF3F2AF08224C82D4, 0x8718ABC7F990CBFD,
        0x484E3F5AC0CCD99, 0x16E391D04B02DBD4, 0xE7D876E43CAEB70B,
        0x2969FA3333BE2FD2, 0xDD930FB5B94CDBB9, 0x698280EED368A913,
        0xEBD98E06AE4FAAF5, 0x4872E3E1AD9239C5, 0xEAD9D9AD57478A41,
        0x300C610107730D57, 0xD5EF3B9228CAF3B4, 0xDBEC1EF1A03FAB20,
        0x1BA3D6B990DA7CBF, 0x94670083193A72D0, 0xFA751DC1016C7243,
        0x8B6635A17B7D3B4B, 0x4C5A33FFF40804B3, 0x5BF6F2FDE8C74D97,
        0xF20BEA7572076F12, 0x5292BCA989983EBD, 0x8A65E3FC4016DFCA,
        0x689B34C78D67D744, 0x93CE2F69F915BCF1, 0x920F2721B19CC1E,
        0x6F8C47EF62AAA097, 0x9B1A5DF11D8BE70, 0xFAD2650E502A9A62,
        0xB42A39F0C7A1B493, 0x68C170ADA61CD405, 0xD6473A6ACE3C99E6,
        0xD5CBEC8928F032F3, 0x95E1EDBAE0E60195, 0x953507CCC8778FC2,
        0x7C4502336B0AF514, 0x1533FC8A71584226, 0x3AD47BECCF1C525B,
        0x506A74C92A00EDAB, 0x429AFC94A49A8829, 0xD54DE99F78BF9D50,
        0xA68F94F0BBB70E91, 0x31137BE9116FF48C, 0xCD3042BA2AE4DB38,
        0x67E385D82B1FD95B, 0x1B4726F468633715, 0xBEE1023C9A1C3A98,
        0xD882FBDE17AF1A7D, 0xDD636F60064BC0A3, 0xAD7D59D974AFCD11,
        0xF3850D5F1C005D64, 0x5B7F0B804B0D910, 0x9FB9561777D949F2,
        0x7872B3457E10AFF6, 0xB47DC4D89C93F93C, 0xB66BBA16CA5D5D24,
        0xB66A04FF34B983AA, 0xFC73E05020FA0AE, 0x87AD5AE8878AA9B5,
        0x25BDE9CAB7E8D345, 0x9FFC29B8227750B0, 0xDCEC494C8FC38C66,
        0x23B189A50BAA9537, 0x5014B1A57EC4FF08, 0xEFED6A8238CBD480,
        0x6285F831B1D94907, 0xB2727E221DA3E5D3, 0x7244D740417C75BA,
        0xA4BDC9C13D6C9A9F, 0xBE91E7A662973468, 0x2DC15AA1491D3E76,
        0xBD0F2E0E3DEBA39E, 0x2CEA32CFF40D3A8E, 0x84DD19A1426AB60,
        0x604DC789A8B1461F, 0x319365C072886585, 0x70F52CAD64879DB9,
        0xC203FBFF8A8CD73A, 0x681E13F0CDAEA24E, 0x580B6FBECDDA34AF,
        0xEDA65A4F4F023DDF, 0x4D3C8687E940E309, 0xD319E115099A9A16,
        0xD3BE82324E1077FE, 0xF9E9E87E5ED2BEB2, 0x2BF0C0C42D2FBE92,
        0x5FFFEDD07F7D9A4A, 0xF409A58F8312EAD5, 0x7342E8FBDBE57FB2,
        0x92413AB6B3697D91, 0xD9B49A50F668123, 0xA19CECB59A357BE8,
        0xCF0D053D81052876, 0xE8FC03243296311D, 0x3AAC648771774BA6,
        0xFA351B7F02C5619E, 0x94E8A4D84FF439F1, 0x27810BE04DC8DFE3,
        0x3B36071A547003D, 0x61802A388423526C, 0x2E1113EC88FEDAAA,
        0x28EBEF5C6161B190, 0x990418082CE45247, 0x95A0A22B3105E0AE,
        0x572A8B5AE53A5EB9, 0x67CA39211E576BC2, 0xA7DA452DE17CE178,
        0x31F86B8A9079997A, 0xCF033F63D252159A, 0xB90512B5BE898666,
        0x4C42F8BE2A5AFACE, 0xF0CCC8884DF96BA8, 0x3337CE0F46BFE70E,
        0xBB0BBA9EAD32580B, 0xC365FA4646D262A9, 0xE25B945866D6193B,
        0x7F3432F47AF6D15C, 0x692A76CD089E999C, 0xA6397D46DF0D0A99,
        0xB270A1B154F2B75A, 0x63AD7C291CD8E956, 0x42204F004DE8F015,
        0x231BE5DB94043E7B, 0x48EAE2AA5D27CB52, 0xE70AFCA238AC6CF4,
        0x3DB43E39683A5BA3, 0xAD48B46AA530DE1, 0x458D6A279949F63B,
        0xC91540CC191347AC, 0x17E2E6E09A8F6C1C, 0xE3010285B23D3472,
        0x7E973D0A6EEEEBBC, 0x3C9C94D10B420E0, 0x4EA7B0B3621F7A8E,
        0x7DE0779264E27E81, 0x3A1A96F237866BBF, 0x2AD4D307256023B3,
        0x7FF2082C7F76C769, 0xAA0DB74D8A41CEB6, 0xC9C54E4A56FB40DF,
        0xBC01054AF8B5563D, 0x9ECAFE5303E1659E, 0xA13A195027633A9B,
        0xC77CC7A9A090034, 0x7D7B3DEE234757FF, 0x44A62F885A42B279,
        0xF5086231F2F88E74, 0xE8049E176B54D4BF, 0xA89FC5F05C851187,
        0x88595D99354B65DA, 0x2343B50E9507A31E, 0x69F83C2CF7455F96,
        0xD5BF47103EA4BE0D, 0xDB94686DFEC0CD41, 0x4592CF76676DF6CC,
        0xFEC092245060429C, 0xBA04756F71999962, 0x4B837A8AB2144BAC,
        0x2117F2DE1A9B11BE, 0xE197FC13E858440B, 0x64A3C88B9F25EE4F,
        0xF5A430B4D6DE81E2, 0x66BBB1E9A921B7E1, 0x767FE379FCFFC33B,
        0xCF01BAA47A23489B, 0xD8DD8804394A4EAA, 0x47F874486B786DDB,
        0xE446F562D9785B9A, 0x31013B8E38750149, 0xC41012C2EB1D6DF5,
        0x592029E7587C5F93, 0xD42B8165F6CF1A50, 0xC5B9235379127A0F,
        0xB63B10FFEDFBF410, 0xAD070633817364D9, 0xE76E927651C1FFA9,
        0x275D86B42B22B349, 0x89464C47CC338D1, 0x70F619B59CE0DB89,
        0x130B066FB6882C84, 0xAC03E02879FE931A, 0x28C37663C1EFB4D3,
        0xD1B1E68A6CF0C8C7, 0x49060BA9D956F559, 0x12334A519204EF93,
        0x57B39C288BFA101A, 0x9CFB77925F91EB56, 0x7F87F071B81AC2F6,
        0x7A624D935BAB717C, 0xED23487B11CB06B8, 0xF285DD754265FBF7,
        0x4E5C9D33D49D5B79, 0x468F74A3D1DF35D6, 0xE7B67082A3912A4F,
        0x7FAF25E4ADF60FA2, 0x4B5B876A1D67D176, 0x577BFC041B2EBDE6,
        0x64810B65DC729DAB, 0x99B2F24A88DAE9C7, 0xAF2CA06543B85C6A,
        0xDBA0B039BCA5C381, 0xE632FEF58E259318, 0x644393E86BD1E229,
        0xA9DD7E32B3B8493, 0x65BE7B20EFFBC778, 0xDE07686276FBB92C,
        0xB8D6AAB889A17F4A, 0xC48D39EC720F5D8F, 0xC6288D026BC1F913,
        0xCC04F96537BCE770, 0x85F4C6313B74B4B9, 0x6A05BCB98A33F7AD,
        0x85F08D669387CC63, 0x6532EB2E77404677, 0x13CEA1BEDC972668,
        0xEDCB8828404FB311, 0x17889D1C005D9C3A, 0x63C9A0F86826FD0B,
        0xDE5844C69AFE3C5C, 0x72FD116412AB70F8, 0x366BAA33C01A8EEC,
        0xACE48D119B1FB538, 0xE9F10A32D3EDA286, 0xB4015A63FCEC598C,
        0x489B0DBA438F1FDB, 0x8B32BA4CF42E474, 0xF1823D2AD32A794A,
        0x3718EA91127FC69D, 0xB8274405CC682D2A, 0xE26B4663780219A8,
        0x6D17059DD38BCC61, 0x840A9A8687D97CBD, 0xC768D998F657C923,
        0xE4875C6BE7D6113D, 0x765FB8E6BD06013A, 0x659B48EAC66E7CB8,
        0x5ABF7F6C5BFDF643, 0x8171825751FADE01, 0xBA407902787B0CF2,
        0x231B675C35884915, 0xC1C933705C0B99EB, 0xF4A1193CEBB80F09,
        0x209711CDC730CA34, 0x7CD6255F5751EC91, 0x72F74AFDDD935445,
        0xEA4763354EA6F573, 0x1FEC0E02ADB8EED4, 0xD8347A27D972C532,
        0x4D2ACBF2618D7599, 0xAD16069BF92E50F4, 0x671516591D6CC696,
        0x5B5C57E9089E542D, 0xA433DB48D5542073, 0xC7B68A580C19436E,
        0xA555D6915546A157, 0x8F27249169699261, 0xC45E42FBA1E1C7A2,
        0xC139B4DA4C0F4443, 0x5391FFC95E47786, 0xED7D31278290CA69,
        0xDEBC4CA8A001B804, 0x199FCA6A4EA1CD28, 0x7C518F8620E2AE22,
        0xB38D2262B9197AC8, 0xC6E6A39D55FB0BE0, 0xA28565B1FD018A3B,
        0x9B00D2AB28C1709D, 0x506C81086F827E08, 0xEE4F3AA42DF1E898,
        0x9D3A8FA465BCCEE9, 0x8639A16B970D0ABA, 0xCA19B89182418CCD,
        0xA55F0DC1DC0AAEAA, 0xD0FC9663BE8DDCDA, 0xF9987CEB8F77EBDD,
        0x116224044ABDDF45, 0x37AD7FA84CCDCEBE, 0xA7309408A3F530EB,
        0x1C2C32557E0CB9CB, 0x2C6CECA06322F869, 0x8CDF0AD5A4723C03,
        0x831CB5F0C8BAC812, 0x21326FC4016EA63F, 0xBF4F39FCCFD97110,
        0x812B1C809A2937E8, 0x717C2EC304F984E9, 0xE66EA54BA187E85E,
        0xD9721BD93B83D005, 0x475D72F747C51073, 0x7380D3B23FAE23FC,
        0x7B488D0548CC27B4, 0xE22C11B0BFDA856A, 0x881A04D7F53501B4,
        0x117D81B96A2901C7, 0xF503009A2D83ADC0, 0x40025AD5AE9C4114,
        0xF98E065121A2BB43, 0xF1AF1DDD2FF04670, 0x1A0956EEB3FD7A28,
        0xE3BF46BA1125997B, 0xF7103C76D0F728C4, 0xB7CB6E5ED2D895B5,
        0x9AFEB92F4E4B3543, 0x9085264C1E7B0E43, 0x2FEE428A82AFE804,
        0x8B29819B48387FCE, 0xBC94924E2387753C, 0x5DD3E0F22B4F8F81,
        0x8DFE8EDB74D5035C, 0xFF6F178B3E89CAE4, 0x5C5144EF22302080,
        0x3910641F4388C0A6, 0x926456910AD6E269, 0x987048302B9AE408,
        0xE28C7CF1A4783EEC, 0x1B379E88A7CE29B, 0x26E62E7336F9E44F,
        0x4515EFB659010370, 0x774DA7E5644E263D, 0x9DF03624F8150D21,
        0xB46E6D07CD2E51BE, 0x5E638AFA29BEF257, 0xB4E741231E202E4D,
        0xE84D487DD4C75C1D, 0x404AB82DE6A941D2, 0xB58C65098B19491,
        0x4EA782882A1AAFBD, 0x6CA2E22045FD1550, 0x90C470F9A26E9C31,
        0xFDE82686EC630AB7, 0xE1AC0D3A0A9A4725, 0xCE09D4687D150006,
        0x369EB611EB88BF09, 0xB35D7153D30F4C5E, 0x150149F11C783945,
        0x84E58E577394E0B4, 0x3D6EB8807B7F9A95, 0xBA6D50FDEFED3805,
        0x5ACD9D9410D9E1E5, 0x4D02D4BDB0279A98, 0xE24C91A50092957A,
        0xF3243CB88A66267A, 0x9E2E4D571678DF9C, 0x4190E54024AEACEF,
        0x608EE5F7FF2C912E, 0x77AB6273692FA067, 0xF39C164494DA5C74,
        0x4CB40E6E2AEFA9E0, 0x3352C1701F0D2FD1, 0x8B0A0C621CF5185D,
        0xD6D91BC75CE18F1B, 0x904E5FC981552D8E, 0xE8D6F37C37725061,
        0xBDFE997492A2E15B, 0xF745F5FF30F1FDA8, 0x8EAD81D48ECB9794,
        0x256CD29186C4FE49, 0x53CA5C1CEAE4B981, 0x778611707E236B43,
        0x8C316A6E2AC1486B, 0x37D11A07F7CB9417, 0x48019E8113EBD013,
        0x97DEFF1FF402C5AE, 0x1C0EB8858A58A2E2, 0xF5F22FCFCDF5D85D,
        0x3134272EAF449D4A, 0x1749BEA3485E4570, 0x5C094546FD122E37,
        0x1A40A2B4B56C6A24, 0x2BD394C554E424D2, 0xCBA417363FC2A15D,
        0xFFCB3D121AF67B3B, 0x103989C12A0BF79A, 0xDA59B83C3DDBD2BC,
        0x13487307D8C3289A, 0x13DEB67D701A3F92, 0x7F99B88E7A37D86,
        0xD2FED7BCF7543255, 0x16110E04483A84F5, 0x5B6E579425B975D6,
        0xB1F51BFAB788C537, 0xC761686424C9ADE9, 0x4045FDAC7E0C3755,
        0x9B22CB3713B388A9, 0x8FE8E0D3B5E3EC27, 0x151C063640B8E6F4,
        0xBC8A890898A85CB8, 0x1137FF48E396476B, 0x25E7FA1F8CD6DDF0,
        0xF73414DB8C849B02, 0x522B8E79C3D2CEC5, 0x175A9151E39254FE,
        0x81330D4815264904, 0x9786B58F487D1A09, 0xBEE6FB38CB0FA508,
        0xD3E4879EBC46F408, 0xEBC2F6BAA7687119, 0xBE0D6C226A896591,
        0x52DED028DFA80ABE, 0xDBA0F7FB61E432AA, 0xCF7F355F162FCB8E,
        0x48AA6E554119BB50, 0xCABFC94A30FD0FF7, 0x8C19BF5A509558D7,
        0x592FCE0B722CFCEA, 0x9E51CF4539B90D9, 0x502C35A76C0D23E,
        0x177AB778A78C9735, 0x596E1EE093272162, 0x48A7FBFD3C2FF25,
        0x5D70BA6277E290C4, 0xA9150598846B0D80, 0xFB10D25B7F940EF4,
        0x29D267B2E9AC3A44, 0x33969718388820F4, 0x9A2B6E60ABFC8F7B,
        0xED08643D62FDEC67, 0xEEED230E1913D5C9, 0x772FF7B9ECFD50E3,
        0xDF0FAEFE5F8D4D5, 0x43183076F668DB29, 0x98DB813A53664025,
        0x758D84872B836E5A, 0x8EF7F8A1E5C2B2F4, 0x9D476A3FB6957AF6,
        0xC0328C1E2F30BEB9, 0xDC08F82BA081BAA7, 0x279121A6151159C6,
        0x816A340AF400038E, 0xC4A6C7BC44428A5E, 0x9F0EAF09C6455976,
        0xEB106ADA5081104C, 0x7F8024B3BF6CC245, 0x52F5F23CDEC2692C,
        0x52C32645DD4CE481, 0xC6033CEAA09AE90C, 0x816320E23FDA595C,
        0x8315B647579A2A22, 0xDF3D5506AD6E9B5D, 0x33ACA46D631AE5AB,
        0x75D2648D641D3122, 0x58C0E6EDF2782553, 0x16F56DD1A25FD03D,
        0x16E1431D1C4A8679, 0xA805714FD61FA9C9, 0x5EDA3888C3B6420A,
        0x9E1979B4E49B5B2C, 0x8A231C6DD60EEAF, 0x2037604F48BA8B8F,
        0xF124479053A8C46C, 0x6E18CA88913B2CF2, 0xCC02B392AB5E1325,
        0xE919B2ADFE18E44D, 0x61FB644139FDFD32, 0xA7884693D91CC27E,
        0x66002595E56B7211, 0x7498279F2A27DD0D, 0x4708D6C2C5F60600,
        0x17FFC066E344967C, 0x1776030548C43A23, 0x5477F74BB99B73A7,
        0x21EC03CF74EBFE7E, 0x62168706BCBB9CAC, 0x84355DB59525D909,
        0xD6BE880512547B52, 0x56340F32BAAE5A35, 0xECBBF49F21767FD4,
        0x6E146993D716654D, 0x13563E6E8724BD90, 0x280D1A770729DA49,
        0x2E5847A946A6E6A7, 0x55FAE4F6FEF488E8, 0x161B2837A10784C1,
        0xA9CED04B3353C351, 0xA12703A28777D3CD, 0xE3489AFCDB62A9E3,
        0x9599E5E65E28B6B, 0x1040B5F216819CB6, 0x4A4C36A32C6B46F2,
        0x2A6B8F57B56E8988, 0xBDC8D918C62FB5D4, 0x94E6F2C934E7EA57,
        0x30F423AEB42C0A71, 0xEC14420438A8A6A5, 0x84F0E28DD6F26174,
        0x44949A760540E148, 0x632D64ADD8EBA485, 0x4C47C47204659325,
        0x964418FC860B3C6F, 0x36CD3BC5D0ACAD91, 0x8C5965855F32EF7E,
        0x76E161F80AD269A1, 0x41DE869B4C3D6052, 0x443B19AFF05622FA,
        0x96447485EBFB08C3, 0x3BEFD26D1A582BDE, 0x94FF8908FD7CB585,
        0xD56526DF0D605B45, 0x5B3BAA6CD63477F2, 0x270F7053C051A0AD,
        0x2083C64BE673D6F3, 0x8A9F705523F5F3E8, 0x4D0ADC87C13F938A,
        0xF00ADFEAAA9EB8AA, 0x253AECC18AF44ACE, 0x7FA781429B42EF20,
        0xC22FFA4A73378D0E, 0x6923B95593B6135D, 0xDBB8B56C1F0A8667,
        0x5C93765FD12AEA06, 0xC8764A6C37E2A221, 0xEF0E0BC9CC848C4,
        0xFBF2C82761028BF7, 0x33D82BDDAF822046, 0x5C334E748F5F0962,
        0xA4542057F0DDFBEA, 0xA33492F650363A46, 0x7931CD75B17F927B,
        0xD80D53BA7B5250DB, 0xBEFB10D4E574DF6, 0xB9A19F67E0CA3DD,
        0xDAB6773411DC1FAA, 0xD8E4AA75C132CF18, 0x36EB544739ACAFEA,
        0x8EB06B25C5E6CECA, 0x81D11DCA4F745DB1, 0x8CF4675AC446FE68,
        0xD50A298B524C2131, 0xA617BF002405E303, 0x6568F83373A58886,
        0xC29A4D82DAA7D137, 0x9A2A2AA3BAFDE427, 0x50BA6DBA3F05AB6E,
        0x7A311257B3D6901, 0x88F29D121E367BD3, 0x575D6FB8C8048335,
        0xF2EAB5ECA3775BF7, 0x38AA1FB9361C225F, 0xDB68B7674C460E5A,
        0x57BB8471D5445A61, 0xA43FCB10631FB6A1, 0x6A880DE4C21ABBF8,
        0xD573A53EEE5794A9, 0xA2A39794BB30E49B, 0x984FD3523FC0E39B,
        0xE039FE6DE98B8859, 0xA7A0EC6CB313B96F, 0xAAB72421FF0EC5CD,
        0x78175299A7F92A63, 0x4C56F5C99FC3DB5F, 0xAD8CDE15AC2764FA,
        0x2576B3267A765B52, 0xE4A7877737067B40, 0xA18B01BB03F13F70,
        0x4064517FDC23BA05, 0x8881D613B769D8B2, 0x34A131D5A8910A7,
        0x9910611E29F65C43, 0x74619A810CDD00C5, 0x773BB5B95B05C223,
        0x949713043C0A116C, 0x28A7DECE9DE6AF6, 0x4737EACEE08AB2AE,
        0x744F83F50448C29D, 0xB042ADD66EB82282, 0xF1C56970EFC17EB1,
        0xE1A0F6B1372FDE8B, 0x813D825288E489AA, 0xBEF49F56B30E0344,
        0x4037267FAC162513, 0x7A32989EA77AB0BE, 0x356D6AF46AB84492,
        0x689EFD7540EA89E0, 0x4C91CC21C81AF398, 0x9399992C2E03051F,
        0xAE2EE78F949F7CDA, 0xB646A2E56E5B114E, 0xDE07FC505DFE5C06,
        0xD450DE3774C93724, 0xC187CF1ACD7607AB, 0x3E1680072C4929F8,
        0xAFB45C48B45333F7, 0x6AA1F70C4843F199, 0xDE31E456087EF2A0,
        0xAB09CD22F102C7B4, 0xA2066001533E7420, 0x7F474E21A9E627CE,
        0x940A78940C652946, 0xDED721059126530A, 0x18CCD70447C39C3C,
        0x6D80FA666502CA67, 0xCF87114642B54B1B, 0x37130C40164E189B,
        0xE9AE214F740F6ADC, 0xF6A7C477E666F7E, 0x5778E29599985341,
        0xAC06C1EC609B9950, 0x2C43474E5A9F53E8, 0xAF8DE88087CE4D63,
        0x1A797460858EFDB2, 0x536DB52C5704457E, 0x719B8FC1F46E0C18,
        0xF94902EF3F32FBC3, 0xC11ACC3E885740A, 0x17D59206D8F87785,
        0xBEFB72FA530ED3F0, 0x97F1D7C30BA17E69, 0xE845EC309512C886,
        0x71CBE0098DAB2F2, 0x8160C160865AD512, 0x1D03080D82E23DB9,
        0xB5E1FD3BB635B461, 0x574DB52B6E581E24, 0xFB6583D78D439216,
        0x846F0BA031FD3C95, 0xFB2CA5D0F6530259, 0x2DA8DF878AEC60CF,
        0x41F5793EB35A984, 0xC996B8F59A02E57A, 0x2ED0F84AEB873E09,
        0x7683993396DC05ED, 0xFC867ECB061A22B3, 0xE8DF9D59307BAFE8,
        0xA004C2B652557403, 0x8DCE0272B5CBB94E, 0x9B42C21E08DBDF20,
        0x1312BB29D7E8F588, 0x67359BC058AAECC3, 0x3A590FD3ABB010F1,
        0x9DDA5F2ABA1F1135, 0x607C76A980F54A9D, 0x5E7075A9B05A76CA,
        0x7DA9E45C7C388AF0, 0xBAA8021FD93C1388, 0x102CE2401A37AF10,
        0xD8EFBC1AD65E01F0, 0xEAF94F2118A936F0, 0x858835C5A106327F,
        0x3DD3EACF76CC20A3, 0x1FA1BA44B3ADF898, 0xB30B1D3E1ABE58AC,
        0xC3B8B8EDBD56972B, 0xA37543D38F420EF4, 0x962BD82199B39939,
        0xE6529F4B6102553F, 0x59F84C75C93824EC, 0x56D1281225930FA1,
        0x3F67B4F36B29356, 0xD187792A0A1E67CD, 0xA1D8283CC838EED2,
        0x338BFC321568F516, 0xE5EA3B1EB3BE03C2, 0xA1008888D421ADAE,
        0xED59F8B11DAA7FC4, 0x9D435A856E8FF9D2, 0xBB5D1A907679394A,
        0x3A93C5AC47BB8A66, 0x9477A557C957A3AC, 0xCC002456C7740C44,
        0x8A4CF2F82839B20C, 0x497E3FE1731503DA, 0x26643B9C32883D7E,
        0x340F2381BAF21C11, 0xC1291C27490868BA, 0xDFF34C0A8ADA166D,
        0xD773DE972371C962, 0xA4EA106C987675D4, 0x1ED04C0C1E3717E2,
        0xC8A81F979507AC0B, 0xE268943AC7180D4B, 0x1975308754B8D1A0,
        0xD6BBBBEE1ECD6991, 0x33F7FF62BF7AAA37, 0x4AC059093CAEB415,
        0xC40DBE23A65B885, 0xEC420C0CB05E6F1A, 0xE139710505BD2ABC,
        0xE15E53080E87F036, 0xC10BD433F04FC964, 0x47D49CCA47D0FCD7,
        0x3C6131F78836628F, 0xA2645908BDF5BB71, 0x21198C5A2D43FC94,
        0xF25ECA32376A82D8, 0xF6082892F6FAF9C2, 0x92E6CFFFE2846592,
        0x763D7D92299856D7, 0x203B5A80DA6A5A9, 0x7598F612890A4F33,
        0x138A5987ECB9E66B, 0x830CF9E64C7C79AB, 0xD085AA545D798DE8,
        0xA0C90F201954E23C, 0x73802CF2E8FE04F, 0xF439D48F27233DD4,
        0x3D5F79B1786D97C8, 0x15F96F658875C66D, 0xF638DFB341346B26,
        0x91E3CEFBCAC935E, 0x791E7DD29036F04F, 0x465D4F19F2D2183E,
        0x85FED02D3B48D706, 0x52437E98509B0666, 0xB612E9C5AD3764B0,
        0xF2C4E68C3A05ED4C, 0xCF01B5ED48A56139, 0x3115A71F016FBE96,
        0xF4A0716EB12D171C, 0x959A8318B67124A4, 0x52D70B20A946348A,
        0x68035EE62F2353E3, 0xDE7A9D4C4D608E06, 0xF6F2A42F4F8A73C1,
        0x254AA809AAE35BB9, 0x5042BFEA6A36CA81, 0x299363528327BD09,
        0x3C227BB5F7F32828, 0xAD4CB9E64BC03331, 0x969F887F82A8D2D4,
        0xF4D28BA03B9F2370, 0x36CDDB33CA0F58A, 0xD78CAAB9DE280EEC,
        0x360E9E8351C3B0A8, 0xA2AB8C2A5852E0CB, 0xB8254B7B1443AC9B,
        0x276B2E83AE7469F4, 0x37AC8F6F0F9666EA, 0x128FFA25FA921F5F,
        0x9D43B01BCAA44A6D, 0xF7226A1BC87D281E, 0x6593B438BE56C788,
        0x5F568573FB16171, 0x9C9134B28CB940AF, 0xF06657D76783ADD1,
        0xABFFF841F2560DF4, 0xECE292EE5A4AFFF6, 0x596F847E49AF4A32,
        0x77CA414D776478AE, 0xC131639B17E82B2F, 0xF39BC253B75798F3,
        0x68E6D4B7B45961, 0xDAE1A11688F3DE3B, 0x995682D16E0C6E23,
        0x989B8A80BD0F7A90, 0x710B9999BAEA2965, 0x6DD293E3D085705D,
        0x7C8112F228FAA07B, 0xD23A9EC68DF404B4, 0xCC28698F91616ECE,
        0xE960864874A2A981, 0xA2283542075FD56C, 0x88D9A274C20D51E7,
        0xA2B2A179B184A966, 0xEACC652C584313DB, 0xA8B82A9BB62B212,
        0x57313206A06EDF43, 0x39999180B2B36ECC, 0xCC9FCFDDC7899656,
        0x18DF21AE4697C1AA, 0x8DBD52AD6C7DA84, 0xE1B03A1C2C8F476D,
        0x1434C919E0C5FF66, 0x47FE781397FA41B2, 0x7CA10708AF929A2E,
        0xB61A513A1DAD15A, 0x9A143D36E74F7D21, 0x7B4A665081C2CB40,
        0xA282955A1746FD7C, 0xA21F6AAD41BEA9EF, 0xF912FBDAEEE12C7F,
        0xB373ADAC3B67B614, 0x89414551170B37A, 0x8E62EE715B513060,
        0x2F0F78D4C6125C7C, 0x10BF0E9A3420FAFE, 0x1A35CE6AF588B8F,
        0xA42D9975A08A30F5, 0x5A468C8747CBE849, 0xF0C5208234A7080E,
        0x92D20D11BD2CF88B, 0x426678BEA6A70162, 0x88A5916483DBFE74,
        0x95F1030E754CAFE, 0x1CA135E63515B921, 0x72FFD41F13413DDB,
        0xFE2AE500BEAFDA6, 0x1D764A776A19F165, 0x9C68FCCF989AE041,
        0x24EE16749CC631C7, 0x91BD0401C03A2763, 0xEF635BAF25848B7B,
        0x2132DF9D217D25EF, 0x1C5922CA2087A0F, 0x706413A6762B874D,
        0x857D359D8A7D4F79, 0xD992DBC4EE6416C8, 0xC4691F5DE9E246B5,
        0x21DDDDDDBA62E954, 0x88046E65AF524C3E, 0xEEA165E699255E7E,
        0x14AE83B63693DF06, 0xED5506FD72BFFA75, 0xFCC867F4595F8FE3,
        0x26F87AAD2BE0F9BD, 0xE8B1B62D697AB10D, 0xF1346C7AD9ADF147,
        0x11A9A922746982CB, 0xEA54AA2DB69F3024, 0x4D55C79A26E19A,
        0x1BD2DA9F094A280, 0x9C874D1FA7BEB525, 0x57E9F2B18B191833,
        0x537C8D1E07BDE0B2, 0xA1C48C59CF2210ED, 0x502170D335DCB012,
        0x6F38D43EE2EC1554, 0x23878AADAB0773CE, 0x7C5664F9E69CEF3A,
        0x55D19423DEF2A3, 0xFA6B89C56AB2FD06, 0xBF9CBFDF100E5B51,
        0xB06085595BA701C, 0x6AD29B5D8DB05023, 0x6D6F476B4300EB9C,
        0xE95ACB5B3AB1F0AE, 0x868AD99BBEC6FE36, 0x140F17E5D8EA8A5C,
        0x7FFF6160B2AF7B0, 0x13B4B9CCAAEE88C, 0x7006DA5B98B01F8F,
        0x5AB675D4FE18B5A7, 0x80564C8D0D663597, 0xD856432C0E433289,
        0x57191087BF35FDD5, 0xFDFE169970359E43, 0x9E695B8704E72F7,
        0xB0FBE4D74BFB70B3, 0xE1595F6876A39F3E, 0xA82A1A32F51643C4,
        0xFF717A1BEFD3D7C0, 0xB1A62B2C732E544D, 0x33AD37294513E736,
        0xBA9220A03D023AD0, 0x7B952D6F3AAD772C, 0x1CD176872269FC0C,
        0x6CEA865DDD85C76D, 0xECAC9A8024030C81, 0x75AA0857621422F5,
        0x307A86966B6DD94E, 0xEAC9C9C70253E54B, 0xB1D83299ED4971A0,
        0x9813132BEBDAEB46, 0x822258D835545F04, 0xF938D05C6E9EBF31,
        0x8E0C8F6F4CAEF01D, 0xC911DC585F80C799, 0xFAA14BEFB4D90352,
        0x12AB8160CA709082, 0xC86EDFA938455D41, 0xE4B482AF693A349F,
        0x9ECEF7EDC32DBE57, 0x511B70A0269CE581, 0xCBF7203AEB9B4758,
        0xD764DA6296BA2D0A, 0x93516E3FEF0339EE, 0x7F263D089625B02E,
        0x9A5854A0D74E107C, 0xAEA8C06B8A7F7E90, 0xCCD737BB18500B71,
        0x9FA198F1E4E569DE, 0x59DCB67B1E3ACAAD, 0x2CCE18C230FD193E,
        0x8907303DE59378E4, 0xE592B9E83DA4D84, 0xAF2719D0B8C1B101,
        0x7432F99F1E57E83B, 0xB0724F36370E554C, 0x87F56171E743EB30,
        0x8D7B76A54B381360, 0x1C396F74A82810BE, 0x3915212A5EEFFAC5,
        0x2DA1A658C15D0A14, 0xB13DCCDF59EA13D9, 0x4B5B473F614AF292,
        0xEE275CA9F2C89AEB, 0xA42858781DFF9FCD, 0x1B754FD2F3FC5F73,
        0xF52CAE98D034F551, 0xD4BE19C373330CC3, 0x47A999B6FEA907C5,
        0xE68DE7E31BF07E9A, 0x23F3A42E09631B33, 0xEAE77AC85F1C2C35,
        0x81816C662831513B, 0x65AE673FDC35C0F8, 0xB85ADDC7B466D670,
        0x9C7BBACDC24C7C4D, 0xA3555AC5490824CC, 0x601092FE36F011E4,
        0xEBDD4F3CE600DF63, 0x2D7FAF97F5A9D718, 0x2039CBE23163D2D6,
        0x830FF7F5AA5704D9, 0x9B29EA542D9FB39A, 0xF987FDFEBEC47B4D,
        0xB25D8AE0C9F97474, 0xBE3133513CCFE7E0, 0xD0DDC4EA3EB80B74,
        0x43753BA22E7AA623, 0xCC3C88C345644F56, 0x48AC7A869450476B,
        0xC6AD73DE398C5F36, 0x5EC217C63C601B0E, 0x8C747F31A4A5F774,
        0x95B74C62202D1D88, 0xFCC01FD0248167E2, 0xB142B9026F1130A,
        0xD907F65B141E89B6, 0xB2EEEDF6A82C72D5, 0xB095C8964036836A,
        0xED3B7D8F1CFB711C, 0xD652490E7D47663C, 0xD69D1EF4E2579BA7,
        0xF2EECE28112DF16C, 0x5CE67EC713D9A0D, 0x593B57E6D5384D02,
        0x92A8C9299EA527F5, 0x8128745C7F2492AC, 0xC3D171B60DEC1496,
        0x715D8D6C500580F2, 0xF378857ED1D2D770, 0x42633B285C73688F,
        0x3DBD4156ADD83C7E, 0x6EEEE892D0570E76, 0xA3F5E8448585EE27,
        0xFC675E016DC4BC37, 0xE49A697197ADD4C2, 0x61A64F9B350F1294,
        0xEA9E5B5D2ACF2841, 0xC52DB5630BB6CFDB, 0xEADB3C957332FFC8,
        0x6E6189A60B8DDC24, 0x64ADEDAF95F5A13D, 0x7CE69E45333CECC,
        0x1699704B23820ECB, 0x248754CB8B28CE7, 0xC3C3C11BFCBFDCBA,
        0xD582CE8A15433808, 0xD99D8D558D6820FA, 0xE9B3B635D438302,
        0x8C86A2072951A9E9, 0x2C837A605292C44C, 0xA29F852CBE8D2F2C,
        0x4B0405D55DDF3671, 0xEC7D6787CD4FC011, 0xF14452BE2CFD53A1,
        0x72DE93A830E991D8, 0xEC095DB6EDB4D06B, 0x580A95F3605D4BBE,
        0xD3D45351A960332F, 0x4C0F721DF9A549A7, 0x1E7778678091F0F5,
        0x7617868C91ACB7C2, 0x520ABBA37A2A2084, 0xEFECFF9C0ADFA975,
        0xEB2870AAEC79634B, 0xD19737993D3C9CB5, 0x1FE1490A35CF4882,
        0x2F309A401968DA7B, 0xFA454A79E155D3A5, 0x2991A1B2F0EC1757,
        0xA490903BD9EDE344, 0xFDD4A903B9B16DC8, 0xAD6A6099A897A9E5,
        0x423EFDD5DA3B5111, 0x938D82B93594C6F5, 0xF64FB868ED763CA8,
        0xE71F970422A0B73F, 0xEB78CBC7F2EB3F7A, 0x8EB0476F7AFFA0EB,
        0xCB47A4917EB4E34C, 0x8FDAB81D2C114BDC, 0xE3D1D7824011BB67,
        0x5698177881C99D02, 0xBDD2FF23066DC8D1, 0x9E1B6D41FD98450B,
        0xB97403E92AFE9D73, 0x30EE876A7F62BC17, 0xB4C17E95A5F9CF02,
        0xAECCF4479FCD5646, 0x115E1DAF38CC7628, 0x3054D833ABF79467,
        0x5E6C3360D328E786, 0xFAC7592D4EA8D211, 0x290A370028BCE24E,
        0x97BD8A3BB1882609, 0x264EA10AE83D9417, 0x99AD7763A6DB587C,
        0xF02B129137AB2ACD, 0xC4FF184B0C89E0C4, 0xDF4B696C2811BEF8,
        0x71BDC173836AE4FB, 0xAFDD260AE71310FA, 0x957A174C21DC7251,
        0xBFA7BA74B032F00C, 0x500A5BC7CE80761, 0x7849D50C457630E5,
        0xA7ACE56F08C7CCC4, 0xE5BE8773DD830DB0, 0x9C2D08AF66F4637B,
        0x1EEB4B9583468A56, 0x86610F05B6672B03, 0x7A3C34CF68C2CB44,
        0x5564660BB041A0BB, 0x70D0ED4D0CC412FD, 0xD344BA3B5D075384,
        0x34D9484303DD42D6, 0x3FF895248107D3C0, 0x7330B2AD3CF498C6,
        0xD3F114B32BC14E6D, 0x67F5068A37195FA4, 0x6921332099111C13,
        0x1FBB42CE07026405, 0x15C2AA971840097C, 0x427D990A52137420,
        0x9BCA5BE221FC6E67, 0x5FA477542CAAF768, 0x7769F7B31BF57683,
        0x5BD6EDDE40134E15, 0x36D073BDD5FC84CC, 0xCBA1B81BB1C5A7C8,
        0xBF3E22C06BF3A4AC, 0xF2F63FA0DC6AC0E3, 0x37869DAF4AAA387D,
        0x3A2CCC0093946BA4, 0x44B4261AA3087351, 0x8817CE563FD3CA9E,
        0xB4A02D6410C7114E, 0x99951214B39EFF73, 0xB9DC234918B79946,
        0xB59FD80BE3F16E1A, 0x63F78B1756453EAE, 0x7B75ED69A9283DEF,
        0xB9BE3CEB1CFD6A11, 0x5B914A66B7DAAD54, 0xA16B5FA2F12486D7,
        0x58C901E3FC87B5C7, 0x3AD4599F81DF277C, 0xB733C5F198F306D7,
        0x5D76E45ED77D7758, 0xEDDA62FB6C77B761, 0x41A3FC95AF6B5B7B,
        0x3AB3C910BDEB0C67, 0x958B41FF0D0C253C, 0x7EFE3F516FE96E9B,
        0x5FF210DABFF74210, 0x67647CE721E46AD0, 0x9AD391B472E03524
    ]

    _empty_board = None
    _values = None

    def __init__(self, source: Optional[Board] = None):
        self._locked = False
        if source:
            self._position = [*source._position]
            self._situation = [[*x] for x in source._situation]
            self._zobrist_hash = source._zobrist_hash
        else:
            self._position = [0 for i in range(Board._numbers_per_board)]
            self._situation = [[0 for j in range(Board._numbers_per_board)] for i in range(8)]
            self._zobrist_hash = Board._get_empty_board_hash()

    @staticmethod
    def _get_empty_board_hash() -> int:
        if not Board._empty_board:
            Board._empty_board = 0
            for i in range(361):
                Board._empty_board ^= Board._zobrist[i * 3]
        return Board._empty_board

    def get(self, coordinate: Coordinate) -> Color:
        if not Board._values:
            Board._values = [Color.EMPTY, Color.BLACK, Color.WHITE, Color.TEMPORARILY_UNPLAYABLE]

        code = self._get_code(coordinate)
        return Board._values[code]

    def _get_code(self, coordinate: Coordinate) -> int:
        index = coordinate.index
        bucket = index // Board._intersections_per_number
        offset = (index % Board._intersections_per_number) * Board._bits_per_intersection
        return (self._situation[0][bucket] >> offset) % 4

    def set(self, coordinate: Coordinate, color: Color) -> Board:
        if self._locked:
            raise Exception('Someone called set() on a locked Board!')

        previous_code = self._get_code(coordinate)
        next_code = color.code

        if previous_code != next_code:
            index = coordinate.index

            # Developer's Note: (J. Craig, 2022-04-28)
            # This is a copy of a comment I wrote in the Java version of this file on 2021-04-25:
            # Update the Zobrist hash and the position-tracking.
            # A "position" is represented using only the values EMPTY, BLACK, and WHITE.  TEMPORARILY_UNPLAYABLE needs
            # to be treated as identical to EMPTY for this case.
            position_previous_code = previous_code % 3
            position_next_code = next_code % 3
            if position_previous_code != position_next_code:
                zobrist_offset = index * 3
                zobrist_previous = zobrist_offset + position_previous_code
                zobrist_next = zobrist_offset + position_next_code
                self._zobrist_hash ^= self._zobrist[zobrist_previous] ^ self._zobrist[zobrist_next]

                bucket = index // Board._intersections_per_number
                bucket_offset = (index % Board._intersections_per_number) * Board._bits_per_intersection

                self._position[bucket] += (
                    (position_next_code << bucket_offset) -
                    (position_previous_code << bucket_offset)
                )

            # Developer's Note: (J. Craig, 2022-04-28)
            # This is a copy of a comment I wrote in the Java version of this file on 2021-04-25:
            # Update the situational representations for the eight orientations.
            for orientation_index in range(8):
                orientation = Orientation.by_ordinal(orientation_index)
                current = self._situation[orientation_index]
                transformed = orientation.transform(coordinate)
                index = transformed.index
                bucket = index // Board._intersections_per_number
                offset = (index % Board._intersections_per_number) * Board._bits_per_intersection
                current[bucket] += (next_code << offset) - (previous_code << offset)

        return self

    @property
    def zobrist_hash(self):
        return self._zobrist_hash

    @property
    def canonical_code(self) -> str:
        canonical = self._select_canonical_form()
        return self._get_code_for(canonical)

    def _select_canonical_form(self) -> int:
        viable = [True for i in range(8)]
        count = 8
        for bucket in range(Board._numbers_per_board - 1, -1, -1):
            best = math.inf
            for i in range(8):
                candidate = self._situation[i][bucket]
                if viable[i] and candidate < best:
                    best = candidate
            for i in range(8):
                if viable[i] and self._situation[i][bucket] > best:
                    viable[i] = False
                    count -= 1
        return viable.index(True)

    def _get_code_for(self, orientation_index: int) -> str:
        buckets = self._situation[orientation_index]
        code = 0
        for i in range(Board._numbers_per_board - 1, -1, -1):
            current = buckets[i]
            code = code * Board._offset + current
        return hex(code)

    @property
    def canonical_orientation(self) -> Orientation:
        ordinal = self._select_canonical_form()
        return Orientation.by_ordinal(ordinal)

    def get_code_for(self, orientation: Orientation) -> str:
        return self._get_code_for(orientation.ordinal)

    def is_same_position_as(self, rhs: Board) -> bool:
        return self._zobrist_hash == rhs._zobrist_hash and self._position == rhs._position

    def lock(self):
        self._locked = True

    def __eq__(self, rhs):
        return (
            super().__eq__(rhs) or
            type(rhs) == Board and
            self._zobrist_hash == rhs._zobrist_hash and
            self._situation[0] == rhs._situation[0]
        )

    def __hash__(self):
        return self._zobrist_hash

    def __str__(self):
        return self.to_string(Orientation.UNCHANGED)

    def to_string(self, orientation: Orientation) -> str:
        representation = ''
        for row in range(19):
            for column in range(19):
                current = Coordinate.get(column, row)
                coordinate = orientation.undo(current)
                color = self.get(coordinate)
                if color == Color.EMPTY:
                    if current == Coordinate.A19:
                        representation += '┌'
                    elif current == Coordinate.T19:
                        representation += '┐'
                    elif current == Coordinate.A1:
                        representation += '└'
                    elif current == Coordinate.T1:
                        representation += '┘'
                    elif row == 0:
                        representation += '┬'
                    elif row == 18:
                        representation += '┴'
                    elif column == 0:
                        representation += '├'
                    elif column == 18:
                        representation += '┤'
                    else:
                        representation += '┼'
                elif color == Color.BLACK:
                    representation += '●'
                elif color == Color.WHITE:
                    representation += '○'
                else:
                    representation += '×'

            representation += '\n'
        return representation
